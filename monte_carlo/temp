
fig00, ax00 = plt.subplots()
fig00.suptitle('Refractive Correction: range of Monte-Carlo', fontsize=16)

dir = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
dir = [0, 9, 10]
# dir = [20, 29, 30]
p_eye = {}
t_eye = {}
kk_ = 0
for k in dir:
    if k < 10:
        path2file = os.path.join('dir' + "0" + str(k), 'anterior_surface.dat')
        t, nodes_t = load_output_dat_file(path2file)
    else:
        path2file = os.path.join('dir' + str(k), 'anterior_surface.dat')
        t, nodes_t = load_output_dat_file(path2file)


    t = np.asarray(t)
    nodes_t = np.asarray(nodes_t)
    nodes_index = nodes_t[0:int(len(nodes_t) / len(t)), 0]
    nodes_t = np.reshape(np.asarray(nodes_t), (len(t), len(nodes_index) * 4), order='C')

    x = np.zeros((len(nodes_index), 3 * len(t)))
    iii = 0
    # stitch disp and pos together
    for steps in t:
        ii = 0
        for i in nodes_index:
            temp = nodes_t[iii, int(np.where(nodes_t[iii, :] == i)[0][0]): int(np.where(nodes_t[iii, :] == i)[0][0]) + 4]
            x[ii, iii * 3:(iii + 1) * 3] = temp[1:]
            ii += 1
        iii += 1

    x = np.array(sorted(x, key=lambda x_column: x_column[0]))

    # # revovle for spherical/biconical fit
    # rot_angle = 5 / 180 * np.pi
    # slices = int(2 * np.pi / rot_angle)
    # skip = 5  # at least one
    # index_15 = (np.abs(x[:, 0] - 1.5)).argmin()
    # x_revolved = np.zeros([np.int(np.ceil((index_15-5) / skip)) * slices, 3 * len(t)])
    # contact_diameter = np.zeros([4, 1])
    # kk = 0
    # for jj in range(slices):
    #     R_y = np.matrix(
    #         [[np.round(np.cos(jj * rot_angle), decimals=6), 0, np.round(np.sin(jj * rot_angle), decimals=6)],
    #          [0, 1, 0],
    #          [-np.round(np.sin(jj * rot_angle), decimals=6), 0, np.round(np.cos(jj * rot_angle), decimals=6)]])
    #     for j in range(len(t)):
    #         # biconic fitting describes surface in function of z; turn coordinate system accordingly
    #         temp = np.transpose(np.dot(R_y, np.transpose(x[5:index_15:skip, j * 3:(j + 1) * 3])))
    #         temp[:, 1] = -(temp[:, 1] - np.max(temp[:, 1], axis=0))
    #         x_revolved[jj * np.int(np.ceil((index_15-5) / skip)):(jj + 1) * np.int(np.ceil((index_15-5) / skip)),
    #         j * 3:(j + 1) * 3] = np.concatenate([temp[:, 2], temp[:, 0], temp[:, 1]], axis=1)

    # calculate Radius and power of the eye
    n = 1.3375
    R_n = np.zeros(np.array([len(t), 1]))
    R_ny = np.zeros(np.array([len(t), 1]))
    power_eye = np.zeros(np.array([len(t), 1]))
    R = np.zeros(np.array([len(t), 1]))
    for j in range((len(t))):
        # pos = x_revolved[5:, j * 3:(j + 1) * 3]
        # r = sphere_fit(pos)
        pos = x[5:np.abs(x[:, 3*j]-1.5).argmin(), j*3:(j + 1)*3]
        r = circ_fit(pos)
        R_n[j] = r[0]
        # R_ny[j] = r[1]
        # R[j] = (R_n[j] + R_ny[j])/2
        power_eye[j] = (n - 1) / (R_n[j] * 1e-3)
    # plot radius eye
    # ax1 = plt.subplot(211)
    if k < 10:
        p_eye[str(k)] = power_eye[30:] - (n - 1) / 0.0076
        t_eye[str(k)] = t[30:]
        #ax00.plot(t[30:] / 3600, power_eye[30:] - (n - 1) / 0.0076)
    else:
        ax00.plot(t[30:] / 3600, power_eye[30:] - (n - 1) / 0.0076)
    ax00.set_xlabel('time [h]', Fontsize=12)
    ax00.set_ylabel('refractive power change [D]', Fontsize=12)
    # plt.ylim([-3, 0])
    plt.xticks((np.arange(0, 98, 2)))


    kk_ += 1
ax00.plot([0, 96], [-1.5, -1.5], color='black', lw=1)
ax00.plot([16, 16], [0, -3], color='black', lw=1)
ax00.plot([24+16, 24+16], [0, -3], color='black', lw=1)
ax00.plot([2*24+16, 2*24+16], [0, -3], color='black', lw=1)
ax00.plot([3*24+16, 3*24+16], [0, -3], color='black', lw=1)

t = t_eye[str(dir[1])]
t_ = t_eye[str(dir[0])]
p_temp = np.interp(t, t_, p_eye[str(dir[0])][:, 0])

ax00.fill_between(t_eye[str(dir[1])] / 3600, p_eye[str(dir[1])][:, 0], p_temp, alpha=0.6, facecolors='gray')
